package types

import (
	"crypto/rsa"
	"time"

	"github.com/google/go-github/v71/github"
)

type PermissionizerConfig struct {
	ExpectedAudience string          `mapstructure:"expected-audience"`
	ClientId         string          `mapstructure:"client-id"`
	PrivateKey       *rsa.PrivateKey `mapstructure:"private-key"`
	WebhookSecret    string          `mapstructure:"webhook-secret"`
	RateLimit        RateLimitConfig `mapstructure:"rate-limit"`
	Unsecure         UnsecureConfig  `mapstructure:"unsecure"`
}

type RateLimitConfig struct {
	TokensPerMinute float64            `mapstructure:"tokens-per-minute"`
	Overrides       map[string]float64 `mapstructure:"overrides"`
}

type UnsecureConfig struct {
	SkipTokenValidation bool `mapstructure:"skip-token-validation"`
}

type IssueTokenRequest struct {
	TargetRepositories []string          `json:"target_repositories" binding:"required,gte=1"`
	Permissions        map[string]string `json:"permissions" binding:"required,gte=1"`
}

type IssueTokenResponse struct {
	Token        string                          `json:"token"`
	ExpiresAt    *time.Time                      `json:"expires_at"`
	Permissions  *github.InstallationPermissions `json:"permissions"`
	Repositories []string                        `json:"repositories"`
	IssuedBy     *TokenRequestor                 `json:"issued_by"`
}

type TokenRequestor struct {
	Repository  string `json:"repository"`
	Ref         string `json:"ref"`
	WorkflowRef string `json:"workflow_ref"`
	RunId       string `json:"run_id"`
}

type PolicyError struct {
	Type  ErrorType `json:"type"`
	Error string    `json:"error,omitempty"`
}

type RepositoryPolicy struct {
	Self  string        `yaml:"self"`
	Allow []AllowPolicy `yaml:"allow"`
}

type AllowPolicy struct {
	Repository  string            `yaml:"repository"`
	Ref         *string           `yaml:"ref,omitempty"`
	WorkflowRef *string           `yaml:"workflow_ref,omitempty"`
	Permissions map[string]string `yaml:"permissions"`
}

type ErrorType string

const (
	InternalError                               ErrorType = "internal_error"
	InvalidIDToken                              ErrorType = "invalid_id_token"
	InvalidRequest                              ErrorType = "invalid_request"
	PermissionizerNotInstalled                  ErrorType = "permissionizer_not_installed"
	PermissionizerNotSufficientPermissions      ErrorType = "permissionizer_not_sufficient_permissions"
	RepositoryMisconfigured                     ErrorType = "repository_misconfigured"
	RepositoryDoesNotAllowAccess                ErrorType = "repository_does_not_allow_access"
	RepositoryDoesNotAllowAccessFromRef         ErrorType = "repository_does_not_allow_access_from_ref"
	RepositoryDoesNotAllowAccessFromWorkflowRef ErrorType = "repository_does_not_allow_access_from_workflow_ref"
	RepositoryDoesNotAllowPermissions           ErrorType = "repository_does_not_allow_requested_permissions"
	RepositoriesMustBelongToSameOrg             ErrorType = "repositories_must_belong_to_same_org"
	InvalidWebhook                              ErrorType = "invalid_webhook"
	InvalidWebhookSecret                        ErrorType = "invalid_webhook_secret"
)

type PermissionsDecision struct {
	Allow               bool
	PermissionDecisions []PermissionDecision
}

type PermissionDecision struct {
	Allow           bool
	Permission      string
	AllowedAccess   string
	RequestedAccess string
}

type ProblemDetail struct {

	// Type is a URI reference [RFC3986] that identifies the problem type.
	// This specification encourages that, when dereferenced, it provides human-readable documentation for the problem
	// type (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
	// "about:blank".
	//
	// ref: https://tools.ietf.org/html/rfc7807#section-3.1
	Type string `json:"type"`

	// Title A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of
	// the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231],
	// Section 3.4).
	//
	// ref: https://tools.ietf.org/html/rfc7807#section-3.1
	Title string `json:"title"`

	// Status The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the
	// problem.
	//
	// ref: https://tools.ietf.org/html/rfc7807#section-3.1
	Status int `json:"status"`

	// Detail (optional) is a human-readable explanation specific to this occurrence of the problem.
	//
	// ref: https://tools.ietf.org/html/rfc7807#section-3.1
	Detail string `json:"detail,omitempty"`

	// Instance (optional) is a URI reference that identifies the specific occurrence of the problem.
	// It may or may not yield further information if dereferenced.
	//
	// ref: https://tools.ietf.org/html/rfc7807#section-3.1
	Instance string `json:"instance,omitempty"`
}
